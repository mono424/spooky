// ⚠️  WARNING: This file is automatically generated by syncgen.
// Do not modify this file manually as changes will be overwritten.
// To regenerate this file, run the syncgen command from the database package.
// Generated on: 2025-10-29 13:47:36 UTC

export interface Schema {
    comment:      Comment;
    commented_on: CommentedOn;
    thread:       Thread;
    user:         User;
    [property: string]: any;
}

export interface Comment {
    /**
     * Record ID of table: user
     */
    author: string;
    /**
     * Assert: $value != NONE AND string::len($value) > 0
     */
    content:     string;
    created_at?: Date;
    /**
     * Record ID
     */
    id: string;
    /**
     * Record ID of table: thread
     */
    thread: string;
}

export interface CommentedOn {
    /**
     * Record ID
     */
    id: string;
    [property: string]: any;
}

export interface Thread {
    /**
     * Record ID of table: user
     */
    author:    string;
    comments?: string[] | null;
    /**
     * Assert: $value != NONE AND string::len($value) > 0
     */
    content:     string;
    created_at?: Date;
    /**
     * Record ID
     */
    id: string;
    /**
     * Assert: $value != NONE AND string::len($value) > 0 AND string::len($value) <= 200
     */
    title: string;
}

export interface User {
    comments?:   string[] | null;
    created_at?: Date;
    /**
     * Record ID
     */
    id: string;
    /**
     * Assert: $value != NONE AND string::len($value) > 0
     */
    password: string;
    /**
     * Assert: $value != NONE AND string::is::alphanum($value) AND string::len($value) > 3
     */
    username: string;
}

/**
 * Relationship definition for a single relationship field
 */
export interface RelationshipDefinition<Model = any> {
    /** The related model type */
    model: Model;
    /** The related table name */
    table: string;
    /** Whether this is a 1:1 or 1:many relationship */
    cardinality: "one" | "many";
}

/**
 * Relationships between tables - nested object structure
 * Maps each table to its relationship fields with their definitions
 */
export interface Relationships {
    thread: {
        author: {
            model: Schema["user"];
            table: "user";
            cardinality: "one";
        };
        comments: {
            model: Schema["comment"];
            table: "comment";
            cardinality: "many";
        };
    };
    comment: {
        thread: {
            model: Schema["thread"];
            table: "thread";
            cardinality: "one";
        };
        author: {
            model: Schema["user"];
            table: "user";
            cardinality: "one";
        };
    };
    user: {
        comments: {
            model: Schema["comment"];
            table: "comment";
            cardinality: "many";
        };
    };
}



export const schema = {
  tables: [
    {
      name: 'user' as const,
      columns: {
        id: { type: 'string' as const, optional: false },
        password: { type: 'string' as const, optional: false },
        username: { type: 'string' as const, optional: false },
        created_at: { type: 'string' as const, optional: true },
        comments: { type: 'string' as const, optional: true },
      },
      primaryKey: ['id'] as const
    },
    {
      name: 'thread' as const,
      columns: {
        id: { type: 'string' as const, optional: false },
        content: { type: 'string' as const, optional: false },
        title: { type: 'string' as const, optional: false },
        author: { type: 'string' as const, optional: false },
        comments: { type: 'string' as const, optional: true },
        created_at: { type: 'string' as const, optional: true },
      },
      primaryKey: ['id'] as const
    },
    {
      name: 'commented_on' as const,
      columns: {
        id: { type: 'string' as const, optional: false },
      },
      primaryKey: ['id'] as const
    },
    {
      name: 'comment' as const,
      columns: {
        id: { type: 'string' as const, optional: false },
        thread: { type: 'string' as const, optional: false },
        author: { type: 'string' as const, optional: false },
        created_at: { type: 'string' as const, optional: true },
        content: { type: 'string' as const, optional: false },
      },
      primaryKey: ['id'] as const
    },
  ],
  relationships: [
    {
      from: 'thread' as const,
      field: 'author' as const,
      to: 'user' as const,
      cardinality: 'one' as const
    },
    {
      from: 'thread' as const,
      field: 'comments' as const,
      to: 'comment' as const,
      cardinality: 'many' as const
    },
    {
      from: 'comment' as const,
      field: 'thread' as const,
      to: 'thread' as const,
      cardinality: 'one' as const
    },
    {
      from: 'comment' as const,
      field: 'author' as const,
      to: 'user' as const,
      cardinality: 'one' as const
    },
    {
      from: 'user' as const,
      field: 'comments' as const,
      to: 'comment' as const,
      cardinality: 'many' as const
    },
  ]
} as const;

export type Schema = typeof schema;


/**
 * The complete SurrealDB schema definition.
 * This constant contains the raw .surql schema file content.
 */
export const SURQL_SCHEMA = `-- ##################################################################
-- SCOPES & AUTHENTICATION
-- ##################################################################
DEFINE ACCESS account ON DATABASE TYPE RECORD
	SIGNUP ( CREATE user SET username = $username, password = crypto::argon2::generate($password) )
	SIGNIN ( SELECT * FROM user WHERE username = $username AND crypto::argon2::compare(password, $password) )
	DURATION FOR TOKEN 15m, FOR SESSION 12h
;

-- ##################################################################
-- USER TABLE
-- ##################################################################

DEFINE TABLE user SCHEMAFULL
  PERMISSIONS FOR select, update, delete, create
  WHERE $access = "account"
  AND id = $auth.id
;

DEFINE FIELD username ON TABLE user TYPE string
    ASSERT $value != NONE AND string::is::alphanum($value) AND string::len($value) > 3;
    
DEFINE INDEX unique_username ON TABLE user FIELDS username UNIQUE;

DEFINE FIELD password ON TABLE user TYPE string
    ASSERT $value != NONE AND string::len($value) > 0;

DEFINE FIELD created_at ON TABLE user TYPE datetime
    VALUE time::now();

-- ##################################################################
-- THREAD TABLE
-- ##################################################################

DEFINE TABLE thread SCHEMAFULL
  PERMISSIONS
    FOR select WHERE true
    FOR update, delete, create WHERE $access = "account" AND author.id = $auth.id
;


DEFINE FIELD title ON TABLE thread TYPE string
    ASSERT $value != NONE AND string::len($value) > 0 AND string::len($value) <= 200;

DEFINE FIELD content ON TABLE thread TYPE string
    ASSERT $value != NONE AND string::len($value) > 0;

DEFINE FIELD author ON TABLE thread TYPE record<user> REFERENCE;

DEFINE FIELD created_at ON TABLE thread TYPE datetime
    VALUE time::now();

-- ##################################################################
-- COMMENT TABLE
-- ##################################################################

DEFINE TABLE comment SCHEMAFULL
  PERMISSIONS
    FOR select WHERE true
    FOR update, delete, create WHERE $access = "account" AND author.id = $auth.id
;

DEFINE FIELD thread ON TABLE comment TYPE record<thread> REFERENCE;

DEFINE FIELD content ON TABLE comment TYPE string
    ASSERT $value != NONE AND string::len($value) > 0;

DEFINE FIELD author ON TABLE comment TYPE record<user> REFERENCE;

DEFINE FIELD created_at ON TABLE comment TYPE datetime
    VALUE time::now();

-- ##################################################################
-- RELATION TABLES
-- ##################################################################


DEFINE FIELD comments ON TABLE user TYPE option<array<record<commented_on>>> REFERENCE;
DEFINE FIELD comments ON TABLE thread TYPE option<array<record<commented_on>>> REFERENCE;

DEFINE TABLE commented_on SCHEMAFULL TYPE RELATION
  FROM comment TO thread
  PERMISSIONS FOR select WHERE true;

DEFINE EVENT comment_created ON TABLE comment WHEN $event = "CREATE" THEN
  RELATE ($after.id)->commented_on->($after.thread)
;`;
