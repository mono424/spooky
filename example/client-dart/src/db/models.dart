// ⚠️  WARNING: This file is automatically generated by syncgen.
// Do not modify this file manually as changes will be overwritten.
// To regenerate this file, run the syncgen command from the database package.
// Generated on: 2025-10-14 14:41:08 UTC

// To parse this JSON data, do
//
//     final tempSchema = tempSchemaFromJson(jsonString);

import 'dart:convert';

TempSchema tempSchemaFromJson(String str) => TempSchema.fromJson(json.decode(str));

String tempSchemaToJson(TempSchema data) => json.encode(data.toJson());

class TempSchema {
    FriendRequest? friendRequest;
    Message? message;
    User? user;

    TempSchema({
        this.friendRequest,
        this.message,
        this.user,
    });

    factory TempSchema.fromJson(Map<String, dynamic> json) => TempSchema(
        friendRequest: json["friend_request"] == null ? null : FriendRequest.fromJson(json["friend_request"]),
        message: json["message"] == null ? null : Message.fromJson(json["message"]),
        user: json["user"] == null ? null : User.fromJson(json["user"]),
    );

    Map<String, dynamic> toJson() => {
        "friend_request": friendRequest?.toJson(),
        "message": message?.toJson(),
        "user": user?.toJson(),
    };
}

class FriendRequest {
    DateTime? createdAt;
    
    ///Record ID of table: user
    String? from;
    
    ///Record ID
    String id;
    
    ///Assert: $value INSIDE ['pending', 'accepted', 'rejected']
    String? status;
    
    ///Record ID of table: user
    String to;

    FriendRequest({
        this.createdAt,
        this.from,
        required this.id,
        this.status,
        required this.to,
    });

    factory FriendRequest.fromJson(Map<String, dynamic> json) => FriendRequest(
        createdAt: json["created_at"] == null ? null : DateTime.parse(json["created_at"]),
        from: json["from"],
        id: json["id"],
        status: json["status"],
        to: json["to"],
    );

    Map<String, dynamic> toJson() => {
        "created_at": createdAt?.toIso8601String(),
        "from": from,
        "id": id,
        "status": status,
        "to": to,
    };
}

class Message {
    
    ///Assert: $value != NONE AND string::len($value) > 0
    String content;
    
    ///Record ID of table: user
    String? from;
    
    ///Record ID
    String id;
    DateTime? readAt;
    DateTime? sentAt;
    
    ///Record ID of table: user
    String to;

    Message({
        required this.content,
        this.from,
        required this.id,
        this.readAt,
        this.sentAt,
        required this.to,
    });

    factory Message.fromJson(Map<String, dynamic> json) => Message(
        content: json["content"],
        from: json["from"],
        id: json["id"],
        readAt: json["read_at"] == null ? null : DateTime.parse(json["read_at"]),
        sentAt: json["sent_at"] == null ? null : DateTime.parse(json["sent_at"]),
        to: json["to"],
    );

    Map<String, dynamic> toJson() => {
        "content": content,
        "from": from,
        "id": id,
        "read_at": readAt?.toIso8601String(),
        "sent_at": sentAt?.toIso8601String(),
        "to": to,
    };
}

class User {
    DateTime? createdAt;
    
    ///Assert: string::is::email($value)
    String email;
    List<String> friends;
    
    ///Record ID
    String id;
    
    ///Assert: $value != NONE AND string::is::alphanum($value) AND string::len($value) > 3
    String username;

    User({
        this.createdAt,
        required this.email,
        required this.friends,
        required this.id,
        required this.username,
    });

    factory User.fromJson(Map<String, dynamic> json) => User(
        createdAt: json["created_at"] == null ? null : DateTime.parse(json["created_at"]),
        email: json["email"],
        friends: List<String>.from(json["friends"].map((x) => x)),
        id: json["id"],
        username: json["username"],
    );

    Map<String, dynamic> toJson() => {
        "created_at": createdAt?.toIso8601String(),
        "email": email,
        "friends": List<dynamic>.from(friends.map((x) => x)),
        "id": id,
        "username": username,
    };
}
