// ⚠️  WARNING: This file is automatically generated by syncgen.
// Do not modify this file manually as changes will be overwritten.
// To regenerate this file, run the syncgen command from the database package.
// Generated on: 2025-10-19 12:42:55 UTC

// To parse this JSON data, do
//
//     final schema = schemaFromJson(jsonString);

import 'dart:convert';

Schema schemaFromJson(String str) => Schema.fromJson(json.decode(str));

String schemaToJson(Schema data) => json.encode(data.toJson());

class Schema {
    Comment? comment;
    Thread? thread;
    User? user;

    Schema({
        this.comment,
        this.thread,
        this.user,
    });

    factory Schema.fromJson(Map<String, dynamic> json) => Schema(
        comment: json["comment"] == null ? null : Comment.fromJson(json["comment"]),
        thread: json["thread"] == null ? null : Thread.fromJson(json["thread"]),
        user: json["user"] == null ? null : User.fromJson(json["user"]),
    );

    Map<String, dynamic> toJson() => {
        "comment": comment?.toJson(),
        "thread": thread?.toJson(),
        "user": user?.toJson(),
    };
}

class Comment {
    
    ///Record ID of table: user
    String author;
    
    ///Assert: $value != NONE AND string::len($value) > 0
    String content;
    DateTime? createdAt;
    
    ///Record ID
    String id;
    
    ///Record ID of table: thread
    String threadId;

    Comment({
        required this.author,
        required this.content,
        this.createdAt,
        required this.id,
        required this.threadId,
    });

    factory Comment.fromJson(Map<String, dynamic> json) => Comment(
        author: json["author"],
        content: json["content"],
        createdAt: json["created_at"] == null ? null : DateTime.parse(json["created_at"]),
        id: json["id"],
        threadId: json["thread_id"],
    );

    Map<String, dynamic> toJson() => {
        "author": author,
        "content": content,
        "created_at": createdAt?.toIso8601String(),
        "id": id,
        "thread_id": threadId,
    };
}

class Thread {
    
    ///Record ID of table: user
    String author;
    
    ///Assert: $value != NONE AND string::len($value) > 0
    String content;
    DateTime? createdAt;
    
    ///Record ID
    String id;
    
    ///Assert: $value != NONE AND string::len($value) > 0 AND string::len($value) <= 200
    String title;

    Thread({
        required this.author,
        required this.content,
        this.createdAt,
        required this.id,
        required this.title,
    });

    factory Thread.fromJson(Map<String, dynamic> json) => Thread(
        author: json["author"],
        content: json["content"],
        createdAt: json["created_at"] == null ? null : DateTime.parse(json["created_at"]),
        id: json["id"],
        title: json["title"],
    );

    Map<String, dynamic> toJson() => {
        "author": author,
        "content": content,
        "created_at": createdAt?.toIso8601String(),
        "id": id,
        "title": title,
    };
}

class User {
    DateTime? createdAt;
    
    ///Record ID
    String id;
    
    ///Assert: $value != NONE AND string::len($value) > 0
    String password;
    
    ///Assert: $value != NONE AND string::is::alphanum($value) AND string::len($value) > 3
    String username;

    User({
        this.createdAt,
        required this.id,
        required this.password,
        required this.username,
    });

    factory User.fromJson(Map<String, dynamic> json) => User(
        createdAt: json["created_at"] == null ? null : DateTime.parse(json["created_at"]),
        id: json["id"],
        password: json["password"],
        username: json["username"],
    );

    Map<String, dynamic> toJson() => {
        "created_at": createdAt?.toIso8601String(),
        "id": id,
        "password": password,
        "username": username,
    };
}


/// The complete SurrealDB schema definition.
/// This constant contains the raw .surql schema file content.
const String SURQL_SCHEMA = "-- ##################################################################
-- SCOPES & AUTHENTICATION
-- ##################################################################
DEFINE ACCESS account ON DATABASE TYPE RECORD
	SIGNUP ( CREATE user SET username = \$username, password = crypto::argon2::generate(\$password) )
	SIGNIN ( SELECT * FROM user WHERE username = \$username AND crypto::argon2::compare(password, \$password) )
	DURATION FOR TOKEN 15m, FOR SESSION 12h
;

-- ##################################################################
-- USER TABLE
-- ##################################################################

DEFINE TABLE user SCHEMAFULL
  PERMISSIONS FOR select, update, delete, create
  WHERE \$access = \"account\"
  AND id = \$auth.id
;

DEFINE FIELD username ON TABLE user TYPE string
    ASSERT \$value != NONE AND string::is::alphanum(\$value) AND string::len(\$value) > 3;
    
DEFINE INDEX unique_username ON TABLE user FIELDS username UNIQUE;

DEFINE FIELD password ON TABLE user TYPE string
    ASSERT \$value != NONE AND string::len(\$value) > 0;

DEFINE FIELD created_at ON TABLE user TYPE datetime
    VALUE time::now();

-- ##################################################################
-- THREAD TABLE
-- ##################################################################

DEFINE TABLE thread SCHEMAFULL
  PERMISSIONS
    FOR select WHERE true
    FOR update, delete, create WHERE \$access = \"account\" AND author.id = \$auth.id
;


DEFINE FIELD title ON TABLE thread TYPE string
    ASSERT \$value != NONE AND string::len(\$value) > 0 AND string::len(\$value) <= 200;

DEFINE FIELD content ON TABLE thread TYPE string
    ASSERT \$value != NONE AND string::len(\$value) > 0;

DEFINE FIELD author ON TABLE thread TYPE record<user>;

DEFINE FIELD created_at ON TABLE thread TYPE datetime
    VALUE time::now();


-- ##################################################################
-- COMMENT TABLE
-- ##################################################################

DEFINE TABLE comment SCHEMAFULL
  PERMISSIONS
    FOR select WHERE true
    FOR update, delete, create WHERE \$access = \"account\" AND author.id = \$auth.id
;

DEFINE FIELD thread_id ON TABLE comment TYPE record<thread>;

DEFINE FIELD content ON TABLE comment TYPE string
    ASSERT \$value != NONE AND string::len(\$value) > 0;

DEFINE FIELD author ON TABLE comment TYPE record<user>;

DEFINE FIELD created_at ON TABLE comment TYPE datetime
    VALUE time::now();

";
